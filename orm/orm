#!/usr/bin/env ruby
# frozen_string_literal: true

require 'yaml'

CONFIG_DIR = ENV.fetch('CONFIG_DIR', '~/.config')
CONFIG_FILE = File.expand_path("#{CONFIG_DIR}/orm.yml")

JAVASCRIPT_BIN_DIR = ENV.fetch('JAVASCRIPT_BIN_DIR', './node_modules/.bin')

PACKAGE_FILES = {
  ruby: ['./Gemfile'],
  elixir: ['./mix.exs', './apps/*/mix.exs'],
  javascript: ['./package.json']
}.freeze

LOCK_FILES = {
  ruby: ['./Gemfile.lock'],
  elixir: ['./mix.lock'],
  javascript: ['package-lock.json', './yarn.lock']
}.freeze

USAGE_MESSAGE = 'Usage: orm COMMAND'

def config
  @config ||= YAML.load_file(CONFIG_FILE) if File.exist?(CONFIG_FILE)
end

def lang
  @lang ||= package_files.detect { |_lang, files| files.any?(&File.method(:exist?)) }&.first
end

def package_files
  @package_files ||= prepare_config(PACKAGE_FILES)
end

def lock_files
  @lock_files ||= prepare_config(LOCK_FILES)
end

def prepare_config(config)
  config.each_with_object({}) do |(lang, paths), prepared_config|
    prepared_config[lang] = Dir.glob(paths).map(&File.method(:expand_path))
  end
end

def files_contains?(files, word)
  Array(files).any? do |file|
    !File.readlines(file).grep(Regexp.new(word)).empty?
  end
end

def package_used?(package)
  files_contains?(package_files[lang], package) || files_contains?(lock_files[lang], package)
end

def orm_package
  @orm_package ||= config.fetch(lang.to_s, {}).keys.detect(&method(:package_used?))
end

def execute_command(command, args)
  command_args = args.join(' ')

  command.tap do |full_command|
    full_command = "#{full_command} #{command_args}"
    full_command = "#{JAVASCRIPT_BIN_DIR}/#{full_command}" if lang == :javascript

    puts full_command
    system(full_command)
  end
end

command, *args = ARGV

unless command
  puts USAGE_MESSAGE
  exit
end

raise "Config '#{config}' not found!" unless config
raise 'Language is not detected!' unless lang
raise 'ORM is not installed' unless orm_package

orm_command = config.dig(lang.to_s, orm_package, command)
orm_command ? execute_command(orm_command, args) : "Command '#{command}' not found!"
