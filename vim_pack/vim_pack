#!/usr/bin/env ruby
# frozen_string_literal: true

require 'uri'
require 'fileutils'

COMMANDS = {
  add: 'add',
  delete: 'del',
  submodule: 'sub',
  disable: 'dis',
  enable: 'enb',
  status: 'sta'
}.freeze

STATUSES = {
  enabled: 'enabled',
  disabled: 'disabled',
  not_installed: 'not installed'
}.freeze

USAGE_MESSAGE = <<~USAGE
  Usage:

  vim_pack add PACKAGE repository - add plugin by cloning repo
           sub PACKAGE repository - add plugin as submodule
           del PACKAGE plugin     - delete plugin
           del PACKAGE            - delete package
           dis PACKAGE plugin     - disable plugin
           enb PACKAGE plugin     - enable plugin
           sta PACKAGE plugin     - plugin status (enabled/disabled/not installed)
USAGE

GITHUB = 'https://github.com'

def validate(args)
  command = args[0]
  package = args[1]

  return if COMMANDS.values.include?(command) && package

  puts USAGE_MESSAGE
  exit
end

def execute_command(command, package, repo)
  case command
  when COMMANDS[:add]
    clone_repo(package, repo)
  when COMMANDS[:submodule]
    add_submodule(package, repo)
  when COMMANDS[:delete]
    repo ? delete_plugin(package, repo) : delete_package(package)
  when COMMANDS[:disable]
    disable_plugin(package, repo)
  when COMMANDS[:enable]
    enable_plugin(package, repo)
  when COMMANDS[:status]
    plugin_status(package, repo)
  else
    puts USAGE_MESSAGE
  end
end

def clone_repo(package, repo)
  url = repo_url(repo)
  plugin = plugin(url)
  `git clone #{url} #{plugin_directory(package, plugin)}`
end

def add_submodule(package, repo)
  url = repo_url(repo)
  plugin = plugin(url)
  `git submodule add #{url} #{plugin_directory(package, plugin)}`
end

def delete_plugin(package, plugin)
  `git rm -r #{plugin_directory(package, plugin)}`
end

def delete_package(package)
  `git rm -r #{package_directory(package)}`
end

def disable_plugin(package, plugin)
  return if plugin_disabled?(package, plugin)

  FileUtils.mkdir_p(disabled_plugins_directory(package))
  `git mv #{enabled_plugin(package, plugin)} #{disabled_plugin(package, plugin)}`
end

def enable_plugin(package, plugin)
  return if plugin_enabled?(package, plugin)

  FileUtils.mkdir_p(enabled_plugins_directory(package))
  `git mv #{disabled_plugin(package, plugin)} #{enabled_plugin(package, plugin)}`
end

def plugin_status(package, plugin)
  puts status(package, plugin)
end

def repo_url(repo)
  repo.start_with?('http') ? repo : "#{GITHUB}/#{repo}"
end

def plugin(url)
  URI(url).path.split('/').last
end

def plugin_directory(package, plugin)
  "#{package_directory(package)}/start/#{plugin}"
end

def package_directory(package)
  ".vim/pack/#{package}"
end

def enabled_plugin(package, plugin)
  "#{enabled_plugins_directory(package)}/#{plugin}"
end

def disabled_plugin(package, plugin)
  "#{disabled_plugins_directory(package)}/#{plugin}"
end

def enabled_plugins_directory(package)
  "#{package_directory(package)}/start"
end

def disabled_plugins_directory(package)
  "#{package_directory(package)}/opt"
end

def status(package, plugin)
  return STATUSES[:enabled] if plugin_enabled?(package, plugin)
  return STATUSES[:disabled] if plugin_disabled?(package, plugin)

  STATUSES[:not_installed]
end

def plugin_enabled?(package, plugin)
  Dir.exist?(enabled_plugin(package, plugin))
end

def plugin_disabled?(package, plugin)
  Dir.exist?(disabled_plugin(package, plugin))
end

validate(ARGV)
execute_command(*ARGV)
