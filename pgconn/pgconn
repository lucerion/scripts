#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'yaml'

DEFAULT_OPTIONS = {
  config: File.expand_path('~/.config/pgconn.yml'),
  bin: '/usr/bin/psql'
}.freeze

OPTIONS = {
  host: '-h',
  port: '-p',
  username: '-U',
  database: '-d'
}.freeze

def options_parser(options = {})
  OptionParser.new('Usage: pgconn DESTINATION [OPTION]') do |option|
    option.on('-c', '--config FILE', "config file. Default: #{DEFAULT_OPTIONS[:config]}") do |value|
      options[:config] = File.expand_path(value)
    end
    option.on('--bin FILE', "executable file. Default: #{DEFAULT_OPTIONS[:bin]}") do |value|
      options[:bin] = File.expand_path(value)
    end
    option.on_tail('--help', 'display a usage message') do
      puts option
      exit
    end
  end
end

def help
  options_parser.parse!(%w[--help])
end

def parse_options!(args = ARGV)
  destination = args.find { |arg| !arg.start_with?('-') }

  DEFAULT_OPTIONS.dup.tap do |options|
    options_parser(options).parse!(args)
    options[:destination] = destination
  end
end

def validate_options!(options)
  config = options[:config]
  raise "Config '#{config}' not found!" unless File.exist?(config)

  help unless options[:destination]
end

def parse_config(options)
  YAML.load_file(options[:config])
end

def validate_config!(config, options)
  destination = options[:destination]
  raise "Options for '#{destination}' not found!" unless config[destination]
end

def command(config, options)
  destination_config = destination_config(config, options)
  password = destination_config[:password]

  command_options(destination_config).tap do |command_options|
    command_options.unshift(options[:bin])
    command_options.unshift("PGPASSWORD=#{password}") if password
  end
end

def destination_config(config, options)
  destination = options[:destination]
  config[destination].transform_keys(&:to_sym)
end

def command_options(destination_config)
  OPTIONS.each_with_object([]) do |(name, option), memo|
    value = destination_config[name]
    memo << "#{option} #{value}" if value
  end
end

options = parse_options!.tap { |parsed_options| validate_options!(parsed_options) }
config = parse_config(options).tap { |parsed_config| validate_config!(parsed_config, options) }
system command(config, options).join(' ')
